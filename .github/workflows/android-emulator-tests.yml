name: android-emulator-tests

on:
  push:
  pull_request:

jobs:
  instrumented:
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK tools
        uses: android-actions/setup-android@v3

      - name: Install emulator runtime dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libpulse0 libnss3 libxcomposite1 libxcursor1 libxdamage1 \
            libxi6 libxrandr2 libxtst6 libasound2 libx11-6 libx11-xcb1 \
            libxcb1 libxss1 libglu1-mesa libdbus-1-3 ca-certificates \
            fonts-liberation libwayland-client0 libwayland-cursor0 || true

      - name: Accept Android licenses
        run: |
          yes | sdkmanager --licenses > /dev/null || true

      - name: Create AVD
        run: |
          set -euo pipefail
          export ANDROID_AVD_HOME="$HOME/.android/avd"
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          export EMU_BIN="$ANDROID_SDK_ROOT/emulator/emulator"
          mkdir -p "$ANDROID_AVD_HOME"
          # Ensure emulator and platform-tools are installed
          sdkmanager --channel=0 --install "emulator" "platform-tools" > /dev/null || true
          sdkmanager --channel=0 --install "system-images;android-30;default;x86_64" > /dev/null
          avdmanager delete avd -n test || true
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;default;x86_64" --force
          echo "AVDs available:" && "$EMU_BIN" -list-avds || true
          if ! "$EMU_BIN" -list-avds | grep -q '^test$'; then
            echo "AVD 'test' was not created correctly" >&2
            ls -la "$ANDROID_AVD_HOME" || true
            exit 1
          fi

      - name: Launch emulator
        run: |
          set -euo pipefail
          export ADB="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/platform-tools/adb"
          export EMU_BIN="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/emulator/emulator"
          export ANDROID_AVD_HOME="$HOME/.android/avd"
          export QT_QPA_PLATFORM=offscreen
          export ANDROID_EMULATOR_USE_SYSTEM_LIBS=1

          # Show versions and paths for diagnostics
          echo "Using EMULATOR: $EMU_BIN"
          echo "Using ADB: $ADB"
          "$EMU_BIN" -version || true
          "$ADB" version || true
          echo "AVDs available:"
          "$EMU_BIN" -list-avds || true

          # Ensure adb server is running and clean
          "$ADB" kill-server || true
          "$ADB" start-server

          # Start emulator in background (software rendering, no snapshot)
          LOG_FILE=emulator_stdout.log
          nohup "$EMU_BIN" \
            -avd test \
            -no-window -no-audio -no-boot-anim \
            -accel off -gpu swiftshader_indirect \
            -no-snapshot -wipe-data \
            -netfast \
            > "$LOG_FILE" 2>&1 &
          EMU_PID=$!

          # Early crash detection
          sleep 2
          if ! kill -0 "$EMU_PID" 2>/dev/null; then
            echo "Emulator process exited early" >&2
            tail -n 200 "$LOG_FILE" || true
            exit 1
          fi

          # Wait until any emulator device appears (timeout 5 min)
          echo "Waiting for emulator device to appear..."
          set +e
          for i in $(seq 1 150); do
            if ! kill -0 "$EMU_PID" 2>/dev/null; then
              echo "Emulator process died while waiting for device" >&2
              tail -n 200 "$LOG_FILE" || true
              exit 1
            fi
            DEV=$("$ADB" devices | awk '/emulator-/{print $1; exit}')
            if [ -n "$DEV" ]; then
              echo "Found device: $DEV"
              break
            fi
            sleep 2
          done
          set -e
          if [ -z "${DEV:-}" ]; then
            echo "Emulator device did not appear in time" >&2
            tail -n 200 "$LOG_FILE" || true
            exit 1
          fi

          # Wait for device to be ready
          "$ADB" -s "$DEV" wait-for-device

          echo "Waiting for Android boot to complete..."
          # Wait until sys.boot_completed=1 and service.bootanim.exit=1 (timeout ~5 min)
          for i in $(seq 1 150); do
            if ! kill -0 "$EMU_PID" 2>/dev/null; then
              echo "Emulator process died during boot" >&2
              tail -n 200 "$LOG_FILE" || true
              exit 1
            fi
            BOOTED=$("$ADB" -s "$DEV" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            BOOTANIM=$("$ADB" -s "$DEV" shell getprop service.bootanim.exit 2>/dev/null | tr -d '\r')
            if [ "$BOOTED" = "1" ] && [ "$BOOTANIM" = "1" ]; then
              echo "Boot completed"
              break
            fi
            sleep 2
          done

          # Speed up animations
          "$ADB" -s "$DEV" shell settings put global window_animation_scale 0 || true
          "$ADB" -s "$DEV" shell settings put global transition_animation_scale 0 || true
          "$ADB" -s "$DEV" shell settings put global animator_duration_scale 0 || true

      - name: Build debug APK (all ABIs in one)
        run: |
          ./gradlew :app:clean :app:assembleDebug --stacktrace
          echo "APK outputs:"
          ls -la app/build/outputs/apk/debug || true

      - name: Install and run app
        run: |
          set -euo pipefail
          export ADB="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/platform-tools/adb"
          export DEV=$("$ADB" devices | awk '/emulator-/{print $1; exit}')
          # Pick single multi-ABI APK
          APK=$(ls app/build/outputs/apk/debug/*.apk | head -n1)
          if [ -z "$APK" ]; then
            echo "APK not found; available files:" >&2
            ls -la app/build/outputs/apk/debug/ || true
            exit 1
          fi
          "$ADB" -s "$DEV" install -r "$APK"
          # Prepare test config in app's files dir (limit scope + tighter timeout)
          # NOTE: run-as requires debug build and will operate in app's data directory
          CONFIG_CONTENT="filter=[tls_server] [tcp_server] [dns] [io_scheduler] [thread_pool] [latch] [semaphore] [condition_variable] [when_any]\ntimeout=3590\n"
          "$ADB" -s "$DEV" shell run-as com.example.libcorotest sh -c 'mkdir -p files && cat > files/coro_test_config.properties' <<< "$CONFIG_CONTENT" || true
          "$ADB" -s "$DEV" logcat -c
          # Start activity and wait until it finishes
          "$ADB" -s "$DEV" shell am start -n com.example.libcorotest/.MainActivity
          # Poll for process exit by checking activity stack disappearing
          TIMEOUT=3600
          while [ $TIMEOUT -gt 0 ]; do
            amstack=$("$ADB" -s "$DEV" shell dumpsys activity activities | grep -E "Activities=.*com.example.libcorotest" || true)
            if [ -z "$amstack" ]; then
              break
            fi
            sleep 2
            TIMEOUT=$((TIMEOUT-2))
          done
          # Dump only our tag to log file for CI readability
          "$ADB" -s "$DEV" logcat -v time -d -s coroTest:I > emulator.log || true
          echo "==== LAST 200 LINES (coroTest) ===="
          tail -n 200 emulator.log || true

      - name: Assert success
        run: |
          # Check for Exit code: 0 line in our logs
          if ! grep -q "Exit code: 0" emulator.log; then
            echo "Tests did not report success" >&2
            exit 1
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: |
            emulator.log
            app/build/outputs/apk/debug/*.apk
